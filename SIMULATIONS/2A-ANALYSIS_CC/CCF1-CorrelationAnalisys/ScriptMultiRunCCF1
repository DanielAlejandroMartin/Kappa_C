# To reproduce all Figures
#for i in $(seq 1 20); do
#for Tr in 0.3100 0.3140 0.3160 0.3170 0.3175 0.3180 0.3185 0.3190 0.3200 0.3220 0.3260 0.330; do

# Fast Run
#for i in $(seq 1 3); do
#for Tr in 0.3100  0.3180 0.3300; do

for i in 1 2 3; do
for Tr in 0.3300 0.3180 0.3100;do

#Uncompress required file
#gunzip ../../1-DynamicsGenerator/ResultsState/StateRun$i""-Tr$Tr"".dat.gz
gunzip ../../1-SIMULATION/1-DynamicsGenerator/ResultsState_AlreadyComputed/StateRun$i""-Tr$Tr"".dat.gz
for W in 30 50 70 100 150 200 250 300 400 500; do

Dmax=$(echo "500/$W-1" |bc)
for Dx in $(seq 0 $Dmax); do
for Dy in $(seq 0 $Dmax); do

startx=$(echo "1+$Dx""*$W" |bc -l)
starty=$(echo "1+$Dy""*$W" |bc -l)

echo Run: $i Tr: $Tr Window Size: $W  startx: $startx starty: $starty

cp 2A-ComputeCCF.f90 Prog.f90

# Avoid Running if alreadi run

if  [ ! -f ResultsCorrel/CorrelRun$i""-Tr$Tr""W$W""x$startx""y$starty"".dat ];
then

#*** Make a copy of the program, searching & replacing the value of its variables ***

perl -pi -e "s[ Run=1][ Run=$i]g" Prog.f90
perl -pi -e "s[Threshold=0.3180][Threshold=$Tr]g" Prog.f90
perl -pi -e "s[Window=100][Window=$W]g" Prog.f90
perl -pi -e "s[startx=1][startx=$startx]g" Prog.f90
perl -pi -e "s[starty=1][starty=$starty]g" Prog.f90

# Save Computational Time Running not far from the zero crossing. It works for most of the cases.
#For casew where maxdist is not enough to cross the zero, you should run again changing MAXDIST by 1.2*MAXDIST
# Still it is faster than setting maxdist=$W/2
MAXDIST=$(grep $Tr ../MAXDISTtable | awk -v W=$W '{if ($2==W) print $3}')
perl -pi -e "s[maxdist=180][maxdist=$MAXDIST]g" Prog.f90
echo "MAXDIST:" $MAXDIST

gfortran -O3 Prog.f90 -o PrunCCF
echo "Computing CCF!"
./PrunCCF


fi

done
done
done

# Compresss Used file
#gzip ../../1-DynamicsGenerator/ResultsState/StateRun$i""-Tr$Tr"".dat.gz
gzip ../../1-SIMULATION/1-DynamicsGenerator/ResultsState_AlreadyComputed/StateRun$i""-Tr$Tr"".dat

done
done 
